#define DEBUG
//--------------------- –ù–ê–°–¢–†–û–ô–ö–ò ----------------------
#define CH_NUM 0x95  // –Ω–æ–º–µ—Ä –∫–∞–Ω–∞–ª–∞ (–¥–æ–ª–∂–µ–Ω —Å–æ–≤–ø–∞–¥–∞—Ç—å —Å –ø–µ—Ä–µ–¥–∞—Ç—á–∏–∫–æ–º)
//--------------------- –ù–ê–°–¢–†–û–ô–ö–ò ----------------------
// –ù–∞ –≤—ã–±–æ—Ä RF24_PA_MIN, RF24_PA_LOW, RF24_PA_HIGH, RF24_PA_MAX
#define SIG_POWER RF24_PA_HIGH
// –°–ö–û–†–û–°–¢–¨ –û–ë–ú–ï–ù–ê
#define SIG_SPEED RF24_1MBPS
//--------------------- –î–õ–Ø –†–ê–ó–†–ê–ë–û–¢–ß–ò–ö–û–í -----------------------

//--------------------- –ë–ò–ë–õ–ò–û–¢–ï–ö–ò ----------------------
#include <iarduino_IR_TX.h>
#include <Wire.h>
#include <SPI.h>
#include "nRF24L01.h"
#include "RF24.h"
#define EEPROM_ADDR 0x50  // –ê–¥—Ä–µ—Å I2C –¥–ª—è 24C65, –æ–±—ã—á–Ω–æ —ç—Ç–æ 0x50 (–¥–ª—è –∞–¥—Ä–µ—Å–∞  0xA0)

RF24 radio(9, 10);  // "—Å–æ–∑–¥–∞—Ç—å" –º–æ–¥—É–ª—å –Ω–∞ –ø–∏–Ω–∞—Ö 9 –∏ 10 –¥–ª—è –ù–ê–ù–û/–£–ù–û
//--------------------- –ë–ò–ë–õ–ò–û–¢–ï–ö–ò ----------------------

//--------------------- –ü–ï–†–ï–ú–ï–ù–ù–´–ï ----------------------
byte pipeNo;
byte address[][6] = { "1Node", "2Node", "3Node", "4Node", "5Node", "6Node" };  // –≤–æ–∑–º–æ–∂–Ω—ã–µ –Ω–æ–º–µ—Ä–∞ —Ç—Ä—É–±
String serialInput = "";
struct Step {
  const char* word;
  void (*procedure)();
  const char* expectedUID;
};

// –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –ª–æ–≥–∏–∫–∏ –∏–≥—Ä—ã

int currentLetterIndex = 0, currentLetterClock = 0;
bool gameActive = false;
unsigned long lastReadTime = 0;
unsigned long lightflash = 0;
int lightflashclock;
byte tempclocll;
bool CnockDor;
int telemetry[2];                            // –º–∞—Å—Å–∏–≤ –¥–∞–Ω–Ω—ã—Ö —Ç–µ–ª–µ–º–µ—Ç—Ä–∏–∏ (—Ç–æ —á—Ç–æ —à–ª—ë–º –Ω–∞ –ø–µ—Ä–µ–¥–∞—Ç—á–∏–∫)
const int micPin = A0;                       // –ü–∏–Ω, –∫ –∫–æ—Ç–æ—Ä–æ–º—É –ø–æ–¥–∫–ª—é—á–µ–Ω –º–∏–∫—Ä–æ—Ñ–æ–Ω
const int knockThreshold = 350;              // –ü–æ—Ä–æ–≥ —Å—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏—è –º–∏–∫—Ä–æ—Ñ–æ–Ω–∞
const int requiredKnocks = 6;                // –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—É–∫–æ–≤
const unsigned long knockTimeout = 2500;     // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É —Å—Ç—É–∫–∞–º–∏ (–º—Å)
const unsigned long minKnockInterval = 200;  // –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –º–µ–∂–¥—É —Å—Ç—É–∫–∞–º–∏ (–º—Å)
int knockCount = 0;
unsigned long lastKnockTime = 0;
unsigned long lastReminderTime = 0;
const unsigned long reminderInterval = 60000;  // 60 —Å–µ–∫—É–Ω–¥

int x;

const char* expectedUIDs[] = {
  "4DCD063E",
  "0289063E",
  "91CD063E",
  "53CD063E",
  "DCA8063E"
};
const int totalSteps = sizeof(expectedUIDs) / sizeof(expectedUIDs[0]);

int currentStepFin = 0;
char lastUID[16] = "123123";  // –î–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–≤—Ç–æ—Ä–æ–≤

void procedure1() {

   
  delay(1000);
 
}

void procedure2() {
  CnockDor = 1;
}
void procedure3() {
 
 
  delay(10000);
}

void procedure4() {
  
  delay(1000);
   
}

void procedure5() {
  delay(1000);
}
void procedure6() {
  delay(1000);
  
}

const int stepSequence[] = { 1, 3, 5, 2, 4, 1 };  // –ø–æ—Ä—è–¥–æ–∫ —à–∞–≥–æ–≤
Step steps[] = {
  { "@clock1815%", procedure1, "7888063E" },
  { "@knockdoor6%", procedure2, "3FA8063E" },
  { "@exploreshelf%", procedure3, "4DCD063E" },
  { "@insideshelf%", procedure3, "0289063E" },
  { "@usekey%", procedure4, "91CD063E" },
  { "@secretknock%", procedure5, "53CD063E" },
  { "@dolleg%", procedure6, "DCA8063E" },
  { "@blackmugheat%", procedure5, "4DCD063E" }
};

// Step steps[] = {
//   { "@clock1815%", procedure1, "19AD063E" },

// };
const int stepCount = sizeof(steps) / sizeof(steps[0]);

int currentStep = 0;
bool waitingForWord = true;
bool waitingForWordwite = false;
bool waitingForUID = false;
bool waitingPentacle = false;
String expectedUID = "";

void setup() {
 
  Wire.begin();
  Serial.begin(115200);
  radioSetup();
  Serial.print(F("Searching for word: "));
  Serial.println(steps[currentStep].word);
  expectedUID = searchInEEPROM(steps[currentStep].word[currentLetterIndex]);
 
}

void loop() {

  while (Serial.available() > 0) {
    char c = Serial.read();

    if (c == '\n' || c == '\r') {
      // –ö–æ–Ω–µ—Ü —Å—Ç—Ä–æ–∫–∏ ‚Äî –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—É
      handleSerialCommand(serialInput);
      serialInput = ""; // –û—á–∏—Å—Ç–∫–∞ –ø–æ—Å–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏
    } else {
      serialInput += c;
    }
  }

 
  if (waitingForWord) {
    Serial.print("Next letter: ");
    Serial.println(steps[currentStep].word[currentLetterIndex]);
    expectedUID = searchInEEPROM(steps[currentStep].word[currentLetterIndex]);
    waitingForWord = false;
  }
 


  if (radio.available(&pipeNo)) {  // —Å–ª—É—à–∞–µ–º —ç—Ñ–∏—Ä
    char receivedUID[16] = "";
    telemetry[0] = 0;
    telemetry[1] = 0;
    radio.read(&receivedUID, sizeof(receivedUID));

 

#ifdef DEBUG
    Serial.print("üì§ UID  —Å–µ—Ä–≤–µ—Ä—É: ");
    Serial.println(receivedUID);
    Serial.print("üîé wait  UID: ");
    Serial.println(expectedUID);
#endif

    if (strcmp(receivedUID, "3FA8063E") == 0) {
      lightflashclock = 9000;
    }
    if (strcmp(receivedUID, "19AD063E") == 0) {
      currentLetterIndex = 0;
      waitingForWord = true;
      waitingForWordwite = false;
    }

    if (expectedUID == receivedUID) {

#ifdef DEBUG
      Serial.println("‚úÖ Correct UID detected!");
#endif
      currentLetterClock++;
      telemetry[0] = 15 + currentLetterClock * 2;
      telemetry[1] = 1400;

      if (currentLetterClock == 10) {
        currentLetterClock = 0;
        currentLetterIndex++;
        waitingForWordwite = true;
      }

      if (steps[currentStep].word[currentLetterIndex] == '\0' && waitingForUID == false) {

        telemetry[0] = 55;
        telemetry[1] = 2100;
        steps[currentStep].procedure();  // –í—ã–ø–æ–ª–Ω—è–µ–º –ø—Ä–æ—Ü–µ–¥—É—Ä—É
        waitingForUID = true;            // –ñ–¥—ë–º –Ω–æ–≤—ã–π UID
        waitingForWord = false;

      } else {
        if (waitingForWordwite == true) {
          waitingForWord = true;  // –ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–π –±—É–∫–≤–µ
          waitingForWordwite = false;
        }
      }

    } else if (waitingForUID && strcmp(receivedUID, steps[currentStep].expectedUID) == 0) {
#ifdef DEBUG
      Serial.print("‚úÖ Expected UID received  ");
      Serial.println(steps[currentStep].expectedUID);
#endif
    
      currentStep++;
      currentLetterIndex = 0;
      waitingForUID = false;
      waitingForWord = true;
      telemetry[0] = 40;
      telemetry[1] = 1000;
      if (currentStep >= stepCount) {
        waitingPentacle = true;
        waitingForUID = false;
        waitingForWord = false;
      }
    } else {

      currentLetterClock = 0;
      telemetry[0] = 1;
      telemetry[1] = 1;

#ifdef DEBUG
      Serial.println("‚ùå Incorrect UID, waiting for the correct one.");
#endif
    }


    if (waitingPentacle == true) {
      // –ò–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞—Ç—å –ø–æ–≤—Ç–æ—Ä –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ UID
      if (strcmp(receivedUID, lastUID) == 0) {
        Serial.println(" lastUID = receivedUID!");
      }
      else {
        strcpy(lastUID, receivedUID);  // –æ–±–Ω–æ–≤–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–π UID
        telemetry[0] = 55;
        telemetry[1] = 1100;


        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π UID
        if (strcmp(receivedUID, expectedUIDs[stepSequence[currentStepFin] - 1]) == 0) {
          Serial.print("Step ");
          Serial.print(currentStepFin + 1);

          currentStepFin++;

          if (currentStepFin >= totalSteps) {

         
            delay(100);
            
            currentStepFin = 0;  // –°–±—Ä–æ—Å –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–π –ø–æ–ø—ã—Ç–∫–∏
          }
        } else {

          currentStepFin = 0;  // –°–±—Ä–æ—Å –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
        }
      }
    }



    // –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–∞–∫–µ—Ç —Ç–µ–ª–µ–º–µ—Ç—Ä–∏–∏
    radio.writeAckPayload(pipeNo, &telemetry, sizeof(telemetry));
    radio.flush_rx();
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∏—Å–∫–∞ UID –≤ –ø–∞–º—è—Ç–∏ 24C64 –∏ –≤–æ–∑–≤—Ä–∞—Ç–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–π –±—É–∫–≤—ã
String searchInEEPROM(char letter) {
  char uidBuffer[15];
  char letterBuffer[2];
  int pageCount = 45;  // –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–∞–Ω–∏—Ü –¥–ª—è –ø–æ–∏—Å–∫–∞ (–∫–∞–∂–¥–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –ø–æ 32 –±–∞–π—Ç–∞)
#ifdef DEBUG
  Serial.print("(letter  ");
  Serial.println(letter);
#endif
  for (int page = 0; page < pageCount; page++) {
    int baseAddr = page * 32;  // –ö–∞–∂–¥—ã–π —ç–ª–µ–º–µ–Ω—Ç UID + –±—É–∫–≤–∞ –∑–∞–Ω–∏–º–∞–µ—Ç 17 –±–∞–π—Ç
    // –ß–∏—Ç–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å EEPROM
    Wire.beginTransmission(EEPROM_ADDR);
    Wire.write((baseAddr >> 8) & 0xFF);  // –°—Ç–∞—Ä—à–∏–π –±–∞–π—Ç –∞–¥—Ä–µ—Å–∞
    Wire.write(baseAddr & 0xFF);         // –ú–ª–∞–¥—à–∏–π –±–∞–π—Ç –∞–¥—Ä–µ—Å–∞
    Wire.endTransmission();
    Wire.requestFrom(EEPROM_ADDR, 32);  // –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º 17 –±–∞–π—Ç (UID + –±—É–∫–≤–∞)

    for (int i = 0; i < 15; i++) {
      uidBuffer[i] = Wire.read();
    }

    // –ß–∏—Ç–∞–µ–º –±—É–∫–≤—É
    for (int i = 0; i < 2; i++) {
      letterBuffer[i] = Wire.read();
    }

    if (letterBuffer[0] == letter) {
#ifdef DEBUG
      Serial.print("(letterBuffer[0]  ");
      Serial.println(letterBuffer[0]);
      Serial.print("uidBuffer  ");
      Serial.println(uidBuffer);
#endif
      if (uidBuffer == "") {
        Serial.print("(letterBuffer[0]  ");
        Serial.println(letterBuffer[0]);
        Serial.print("ERROR  ");
        delay(10000);
      }
      return String(uidBuffer);
    }
  }

  return "";  // –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ
}


void radioSetup() {                      // –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ —Ä–∞–¥–∏–æ
  radio.begin();                         // –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –º–æ–¥—É–ª—å 
  radio.setAutoAck(1);                   // —Ä–µ–∂–∏–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø—Ä–∏—ë–º–∞, 1 –≤–∫–ª 0 –≤—ã–∫–ª
  radio.setRetries(5, 15);               // (–≤—Ä–µ–º—è –º–µ–∂–¥—É –ø–æ–ø—ã—Ç–∫–æ–π –¥–æ—Å—Ç—É—á–∞—Ç—å—Å—è, —á–∏—Å–ª–æ –ø–æ–ø—ã—Ç–æ–∫)
  radio.enableAckPayload();              // —Ä–∞–∑—Ä–µ—à–∏—Ç—å –æ—Ç—Å—ã–ª–∫—É –¥–∞–Ω–Ω—ã—Ö –≤ –æ—Ç–≤–µ—Ç –Ω–∞ –≤—Ö–æ–¥—è—â–∏–π —Å–∏–≥–Ω–∞–ª
  radio.setPayloadSize(32);              // —Ä–∞–∑–º–µ—Ä –ø–∞–∫–µ—Ç–∞, –±–∞–π—Ç
  radio.openReadingPipe(1, address[0]);  // —Ö–æ—Ç–∏–º —Å–ª—É—à–∞—Ç—å —Ç—Ä—É–±—É 0
  
  //radio.openWritingPipe(address[1]);     // —Ö–æ—Ç–∏–º –ø–∏—Å–∞—Ç—å —Ç—Ä—É–±—É 1
  radio.setChannel(CH_NUM);              // –≤—ã–±–∏—Ä–∞–µ–º –∫–∞–Ω–∞–ª (–≤ –∫–æ—Ç–æ—Ä–æ–º –Ω–µ—Ç —à—É–º–æ–≤!)
  radio.setPALevel(SIG_POWER);           // —É—Ä–æ–≤–µ–Ω—å –º–æ—â–Ω–æ—Å—Ç–∏ –ø–µ—Ä–µ–¥–∞—Ç—á–∏–∫–∞
  radio.setDataRate(SIG_SPEED);          // —Å–∫–æ—Ä–æ—Å—Ç—å –æ–±–º–µ–Ω–∞
  // –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ–¥–∏–Ω–∞–∫–æ–≤–∞ –Ω–∞ –ø—Ä–∏—ë–º–Ω–∏–∫–µ –∏ –ø–µ—Ä–µ–¥–∞—Ç—á–∏–∫–µ!
  // –ø—Ä–∏ —Å–∞–º–æ–π –Ω–∏–∑–∫–æ–π —Å–∫–æ—Ä–æ—Å—Ç–∏ –∏–º–µ–µ–º —Å–∞–º—É—é –≤—ã—Å–æ–∫—É—é —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∏ –¥–∞–ª—å–Ω–æ—Å—Ç—å!!
  radio.powerUp();         // –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É
  radio.startListening();  // –Ω–∞—á–∏–Ω–∞–µ–º —Å–ª—É—à–∞—Ç—å —ç—Ñ–∏—Ä, –º—ã –ø—Ä–∏—ë–º–Ω—ã–π –º–æ–¥—É–ª—å
}



void handleSerialCommand(String command) {
   
    Serial.println("Fin");
 
}
