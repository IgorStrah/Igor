#include <SPI.h>
#include <nRF24L01.h>
#include <RF24.h>
#include <Wire.h>
#define MAX_WORD_LENGTH 10
#define EEPROM_ADDR 0x50  // –ê–¥—Ä–µ—Å I2C –¥–ª—è 24C65, –æ–±—ã—á–Ω–æ —ç—Ç–æ 0x50 (–¥–ª—è –∞–¥—Ä–µ—Å–∞ 0xA0)
RF24 radio(9, 8);         // CE, CSN
const byte serverAddress[6] = "Server";
const byte clientAddress[6] = "Client";


// –°–ø–∏—Å–æ–∫ —Å–ª–æ–≤
const char* words[] = { "hell", "god", "lock" };
const int wordCount = sizeof(words) / sizeof(words[0]);

// –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –ª–æ–≥–∏–∫–∏ –∏–≥—Ä—ã
char targetWord[MAX_WORD_LENGTH] = "";
int currentLetterIndex = 0, currentLetterClock = 0;
bool gameActive = false;
unsigned long lastReadTime = 0;



// –§—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –∏–≥—Ä—ã –ø–æ –≤–Ω–µ—à–Ω–µ–º—É —Å–æ–±—ã—Ç–∏—é
void startNewGame(int wordIndex) {
  if (wordIndex < 0 || wordIndex >= wordCount) return;

  strcpy(targetWord, words[wordIndex]);  // –í—ã–±–∏—Ä–∞–µ–º —Å–ª–æ–≤–æ
  currentLetterIndex = 0;                // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –∏–Ω–¥–µ–∫—Å
  gameActive = true;

  Serial.print("üéØ –ó–∞–≥–∞–¥–∞–Ω–æ —Å–ª–æ–≤–æ: ");
  Serial.println(targetWord);
}

// –§—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤–∏–±—Ä–∞—Ü–∏–∏ –∫–ª–∏–µ–Ω—Ç—É
void sendVibration(int strength, int duration) {
  struct {
    int vib;
    int timevib;
  } data = { strength, duration };

  radio.stopListening();
  radio.write(&data, sizeof(data));
  radio.startListening();
}

void setup() {
  Serial.begin(115200);
  SPI.begin();
  Wire.begin();
  radio.begin();
  radio.setPALevel(RF24_PA_HIGH);
  radio.setDataRate(RF24_250KBPS);
  radio.setRetries(5, 15);
  radio.setAutoAck(true);

  radio.openWritingPipe(clientAddress);
  radio.openReadingPipe(1, serverAddress);
  radio.startListening();

  Serial.println("üì° –°–µ—Ä–≤–µ—Ä RFID + nRF24L01 –∑–∞–ø—É—â–µ–Ω...");
}

void loop() {
  // –ß–∏—Ç–∞–µ–º –∫–æ–º–∞–Ω–¥—É –¥–ª—è –≤—ã–±–æ—Ä–∞ —Å–ª–æ–≤–∞
  if (Serial.available()) {
    char cmd = Serial.read();
    if (cmd == '1') {
      startNewGame(0);  // –ó–∞–ø—É—Å–∫ –ø–µ—Ä–≤–æ–≥–æ —Å–ª–æ–≤–∞
    } else if (cmd == '2') {
      startNewGame(1);  // –ó–∞–ø—É—Å–∫ –≤—Ç–æ—Ä–æ–≥–æ —Å–ª–æ–≤–∞
    } else if (cmd == '3') {
      startNewGame(2);  // –ó–∞–ø—É—Å–∫ —Ç—Ä–µ—Ç—å–µ–≥–æ —Å–ª–æ–≤–∞
    }
  }

  if (radio.available()) {
    char receivedUID[15] = "";
    radio.read(&receivedUID, sizeof(receivedUID));



    char receivedLetter = searchInEEPROM(receivedUID);

    if (receivedLetter != '\0') {
    //  Serial.print("üîé –ù–∞–π–¥–µ–Ω–Ω–∞—è –±—É–∫–≤–∞: ");
    //  Serial.println(receivedLetter);
    } else {
     // Serial.println("‚ùå UID –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ!");
      return;
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –±—É–∫–≤—ã –∏ –∑–∞–¥–µ—Ä–∂–∫—É
    if (gameActive && millis() - lastReadTime > 600) {
      lastReadTime = millis();  // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–∞–π–º–µ—Ä

      if (receivedLetter == targetWord[currentLetterIndex]) {
        Serial.println("‚úÖ –í–µ—Ä–Ω–∞—è –±—É–∫–≤–∞!");
        currentLetterClock++ ;
         sendVibration(25, 390);  // –í–∏–±—Ä–∞—Ü–∏—è –Ω–∞ 15 –º—Å
        
        if (currentLetterClock == 15) {
          currentLetterClock = 0;
          currentLetterIndex++;
        }
        if (currentLetterIndex >= strlen(targetWord)) {
          Serial.println("üéâ –ó–∞–¥–∞–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ!");
          gameActive = false;
        }
      } else {
        currentLetterClock = 0;
        Serial.println("‚ùå –û—à–∏–±–∫–∞, –∂–¥—ë–º –ø—Ä–∞–≤–∏–ª—å–Ω—É—é –±—É–∫–≤—É!");
      }
    }
  }
}

char searchInEEPROM(const char* uid) {
  char uidBuffer[15];
  char letterBuffer[2];
  int pageCount = 45;  // –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–∞–Ω–∏—Ü –¥–ª—è –ø–æ–∏—Å–∫–∞ (–∫–∞–∂–¥–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –ø–æ 32 –±–∞–π—Ç–∞)

  for (int page = 0; page < pageCount; page++) {
    int baseAddr = page * 32;  // –ö–∞–∂–¥—ã–π —ç–ª–µ–º–µ–Ω—Ç UID + –±—É–∫–≤–∞ –∑–∞–Ω–∏–º–∞–µ—Ç 17 –±–∞–π—Ç

    // –ß–∏—Ç–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å EEPROM
    Wire.beginTransmission(EEPROM_ADDR);
    Wire.write((baseAddr >> 8) & 0xFF);  // –°—Ç–∞—Ä—à–∏–π –±–∞–π—Ç –∞–¥—Ä–µ—Å–∞
    Wire.write(baseAddr & 0xFF);         // –ú–ª–∞–¥—à–∏–π –±–∞–π—Ç –∞–¥—Ä–µ—Å–∞
    Wire.endTransmission();
    Wire.requestFrom(EEPROM_ADDR, 32);  // –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º 17 –±–∞–π—Ç (UID + –±—É–∫–≤–∞)

    // –ß–∏—Ç–∞–µ–º UID
    for (int i = 0; i < 15; i++) {
      uidBuffer[i] = Wire.read();
    }

    // –ß–∏—Ç–∞–µ–º –±—É–∫–≤—É
    for (int i = 0; i < 2; i++) {
      letterBuffer[i] = Wire.read();
    }



    // –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º —Å—á–∏—Ç–∞–Ω–Ω—ã–π UID —Å –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–º
    if (strncmp(uid, uidBuffer, 15) == 0) {

      return letterBuffer[0];  // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –±—É–∫–≤—É, –µ—Å–ª–∏ UID —Å–æ–≤–ø–∞–ª
    }
  }

  return "";  // –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ
}
