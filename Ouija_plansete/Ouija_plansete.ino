

// –≠–¢–û –°–ö–ï–¢–ß –ü–ï–†–ï–î–ê–¢–ß–ò–ö–ê!!!

//--------------------- –ù–ê–°–¢–†–û–ô–ö–ò ----------------------
#define CH_NUM 0x95  // –Ω–æ–º–µ—Ä –∫–∞–Ω–∞–ª–∞ (–¥–æ–ª–∂–µ–Ω —Å–æ–≤–ø–∞–¥–∞—Ç—å —Å –ø—Ä–∏—ë–º–Ω–∏–∫–æ–º)
//--------------------- –ù–ê–°–¢–†–û–ô–ö–ò ----------------------

//--------------------- –î–õ–Ø –†–ê–ó–†–ê–ë–û–¢–ß–ò–ö–û–í -----------------------
// –£–†–û–í–ï–ù–¨ –ú–û–©–ù–û–°–¢–ò –ü–ï–†–ï–î–ê–¢–ß–ò–ö–ê
// –ù–∞ –≤—ã–±–æ—Ä RF24_PA_MIN, RF24_PA_LOW, RF24_PA_HIGH, RF24_PA_MAX
#define SIG_POWER RF24_PA_HIGH

// –°–ö–û–†–û–°–¢–¨ –û–ë–ú–ï–ù–ê
// –ù–∞ –≤—ã–±–æ—Ä RF24_2MBPS, RF24_1MBPS, RF24_250KBPS
// –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ–¥–∏–Ω–∞–∫–æ–≤–∞ –Ω–∞ –ø—Ä–∏—ë–º–Ω–∏–∫–µ –∏ –ø–µ—Ä–µ–¥–∞—Ç—á–∏–∫–µ!
// –ø—Ä–∏ —Å–∞–º–æ–π –Ω–∏–∑–∫–æ–π —Å–∫–æ—Ä–æ—Å—Ç–∏ –∏–º–µ–µ–º —Å–∞–º—É—é –≤—ã—Å–æ–∫—É—é —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∏ –¥–∞–ª—å–Ω–æ—Å—Ç—å!!
// –í–ù–ò–ú–ê–ù–ò–ï!!! enableAckPayload –ù–ï –†–ê–ë–û–¢–ê–ï–¢ –ù–ê –°–ö–û–†–û–°–¢–ò 250 kbps!
#define SIG_SPEED RF24_1MBPS
//--------------------- –î–õ–Ø –†–ê–ó–†–ê–ë–û–¢–ß–ò–ö–û–í -----------------------

//--------------------- –ë–ò–ë–õ–ò–û–¢–ï–ö–ò ----------------------
#include <SPI.h>
#include "nRF24L01.h"
#include "RF24.h"
#include <MFRC522.h>

#define SS_PIN 10
#define RST_PIN 9
RF24 radio(8, 7);  // CE, CSN
#define VIBRATION_PIN 5
MFRC522 mfrc522(SS_PIN, RST_PIN);
//--------------------- –ë–ò–ë–õ–ò–û–¢–ï–ö–ò ----------------------

//--------------------- –ü–ï–†–ï–ú–ï–ù–ù–´–ï ----------------------
byte address[][6] = { "1Node", "2Node", "3Node", "4Node", "5Node", "6Node" };  // –≤–æ–∑–º–æ–∂–Ω—ã–µ –Ω–æ–º–µ—Ä–∞ —Ç—Ä—É–±
unsigned long lastReadTime = 0;

int transmit_data[2];  // –º–∞—Å—Å–∏–≤ –ø–µ—Ä–µ—Å—ã–ª–∞–µ–º—ã—Ö –¥–∞–Ω–Ω—ã—Ö
int vibData[2];        // –º–∞—Å—Å–∏–≤ –ø—Ä–∏–Ω—è—Ç—ã—Ö –æ—Ç –ø—Ä–∏—ë–º–Ω–∏–∫–∞ –¥–∞–Ω–Ω—ã—Ö —Ç–µ–ª–µ–º–µ—Ç—Ä–∏–∏
byte rssi;
int trnsmtd_pack = 1, failed_pack;

unsigned long vibEndTime = 0;
char uidBuffer[16] = "NoCard";  // –ë—É—Ñ–µ—Ä –¥–ª—è UID (–µ—Å–ª–∏ –Ω–µ—Ç –∫–∞—Ä—Ç—ã)

int vibValue = 0;



//--------------------- –ü–ï–†–ï–ú–ï–ù–ù–´–ï ----------------------

void setup() {
  Serial.begin(115200);  // –æ—Ç–∫—Ä—ã–≤–∞–µ–º –ø–æ—Ä—Ç –¥–ª—è —Å–≤—è–∑–∏ —Å –ü–ö
  SPI.begin();
  mfrc522.PCD_Init();
  radioSetup();
  pinMode(VIBRATION_PIN, OUTPUT);
  analogWrite(VIBRATION_PIN, 0);
  Serial.println("üì° –ö–ª–∏–µ–Ω—Ç RFID + nRF24L01 –∑–∞–ø—É—â–µ–Ω...");
}

void loop() {


  if (millis() - lastReadTime > 200) {
    lastReadTime = millis();  // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–∞–π–º–µ—Ä
    if (mfrc522.PICC_IsNewCardPresent() && mfrc522.PICC_ReadCardSerial()) {
      // –ß–∏—Ç–∞–µ–º UID –∫–∞—Ä—Ç—ã
      memset(uidBuffer, 0, sizeof(uidBuffer));
      for (byte i = 0; i < mfrc522.uid.size; i++) {
        sprintf(uidBuffer + i * 2, "%02X", mfrc522.uid.uidByte[i]);
      }

      Serial.print("üÜî UID —Å—á–∏—Ç–∞–Ω: ");
      Serial.println(uidBuffer);

      // mfrc522.PICC_HaltA();  // –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∫–∞—Ä—Ç—É
      mfrc522.PCD_StopCrypto1();


      if (radio.write(&uidBuffer, sizeof(uidBuffer))) {

        if (!radio.available()) {  // –µ—Å–ª–∏ –ø–æ–ª—É—á–∞–µ–º –ø—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç
        } else {
          while (radio.available()) {               // –µ—Å–ª–∏ –≤ –æ—Ç–≤–µ—Ç–µ —á—Ç–æ-—Ç–æ –µ—Å—Ç—å
            radio.read(&vibData, sizeof(vibData));  // —á–∏—Ç–∞–µ–º
            // –ø–æ–ª—É—á–∏–ª–∏ –∑–∞–±–∏—Ç—ã–π –¥–∞–Ω–Ω—ã–º–∏ –º–∞—Å—Å–∏–≤ telemetry –æ—Ç–≤–µ—Ç–∞ –æ—Ç –ø—Ä–∏—ë–º–Ω–∏–∫–∞

            vibValue = vibData[0];
            vibEndTime = millis() + vibData[1];
            analogWrite(VIBRATION_PIN, vibValue);
          }
        }
      }
    }
  }
  if (vibValue > 0 && millis() >= vibEndTime) {
    analogWrite(VIBRATION_PIN, 0); 
    vibValue = 0;
  }

  /*
  // –∑–∞–±–∏–≤–∞–µ–º transmit_data –¥–∞–Ω–Ω—ã–º–∏, –¥–ª—è –ø—Ä–∏–º–µ—Ä–∞
  transmit_data[0] = 10;
  transmit_data[0] = 20;

  // –æ—Ç–ø—Ä–∞–≤–∫–∞ –ø–∞–∫–µ—Ç–∞ transmit_data
  if (radio.write(&transmit_data, sizeof(transmit_data))) {
    trnsmtd_pack++;
    if (!radio.available()) {   // –µ—Å–ª–∏ –ø–æ–ª—É—á–∞–µ–º –ø—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç
    } else {
      while (radio.available() ) {                    // –µ—Å–ª–∏ –≤ –æ—Ç–≤–µ—Ç–µ —á—Ç–æ-—Ç–æ –µ—Å—Ç—å
        radio.read(&telemetry, sizeof(telemetry));    // —á–∏—Ç–∞–µ–º
        // –ø–æ–ª—É—á–∏–ª–∏ –∑–∞–±–∏—Ç—ã–π –¥–∞–Ω–Ω—ã–º–∏ –º–∞—Å—Å–∏–≤ telemetry –æ—Ç–≤–µ—Ç–∞ –æ—Ç –ø—Ä–∏—ë–º–Ω–∏–∫–∞

        Serial.println(telemetry[0]);
      }
    }
  } else {
    failed_pack++;
  }

  if (millis() - RSSI_timer > 1000) {    // —Ç–∞–π–º–µ—Ä RSSI
    // —Ä–∞—Å—á—ë—Ç –∫–∞—á–µ—Å—Ç–≤–∞ —Å–≤—è–∑–∏ (0 - 100%) –Ω–∞ –æ—Å–Ω–æ–≤–µ —á–∏—Å–ª–∞ –æ—à–∏–±–æ–∫ –∏ —á–∏—Å–ª–∞ —É—Å–ø–µ—à–Ω—ã—Ö –ø–µ—Ä–µ–¥–∞—á
    rssi = (1 - ((float)failed_pack / trnsmtd_pack)) * 100;

    // —Å–±—Ä–æ—Å–∏—Ç—å –∑–Ω–∞—á–µ–Ω–∏—è
    failed_pack = 0;
    trnsmtd_pack = 0;
    RSSI_timer = millis();
  }
  */
}

void radioSetup() {
  radio.begin();                      // –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –º–æ–¥—É–ª—å
  radio.setAutoAck(1);                // —Ä–µ–∂–∏–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø—Ä–∏—ë–º–∞, 1 –≤–∫–ª 0 –≤—ã–∫–ª
  radio.setRetries(0, 15);            // (–≤—Ä–µ–º—è –º–µ–∂–¥—É –ø–æ–ø—ã—Ç–∫–æ–π –¥–æ—Å—Ç—É—á–∞—Ç—å—Å—è, —á–∏—Å–ª–æ –ø–æ–ø—ã—Ç–æ–∫)
  radio.enableAckPayload();           // —Ä–∞–∑—Ä–µ—à–∏—Ç—å –æ—Ç—Å—ã–ª–∫—É –¥–∞–Ω–Ω—ã—Ö –≤ –æ—Ç–≤–µ—Ç –Ω–∞ –≤—Ö–æ–¥—è—â–∏–π —Å–∏–≥–Ω–∞–ª
  radio.setPayloadSize(32);           // —Ä–∞–∑–º–µ—Ä –ø–∞–∫–µ—Ç–∞, –≤ –±–∞–π—Ç–∞—Ö
  radio.openWritingPipe(address[0]);  // –º—ã - —Ç—Ä—É–±–∞ 0, –æ—Ç–∫—Ä—ã–≤–∞–µ–º –∫–∞–Ω–∞–ª –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏ –¥–∞–Ω–Ω—ã—Ö
  radio.setChannel(CH_NUM);           // –≤—ã–±–∏—Ä–∞–µ–º –∫–∞–Ω–∞–ª (–≤ –∫–æ—Ç–æ—Ä–æ–º –Ω–µ—Ç —à—É–º–æ–≤!)
  radio.setPALevel(SIG_POWER);        // —É—Ä–æ–≤–µ–Ω—å –º–æ—â–Ω–æ—Å—Ç–∏ –ø–µ—Ä–µ–¥–∞—Ç—á–∏–∫–∞
  radio.setDataRate(SIG_SPEED);       // —Å–∫–æ—Ä–æ—Å—Ç—å –æ–±–º–µ–Ω–∞
  // –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ–¥–∏–Ω–∞–∫–æ–≤–∞ –Ω–∞ –ø—Ä–∏—ë–º–Ω–∏–∫–µ –∏ –ø–µ—Ä–µ–¥–∞—Ç—á–∏–∫–µ!
  // –ø—Ä–∏ —Å–∞–º–æ–π –Ω–∏–∑–∫–æ–π —Å–∫–æ—Ä–æ—Å—Ç–∏ –∏–º–µ–µ–º —Å–∞–º—É—é –≤—ã—Å–æ–∫—É—é —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∏ –¥–∞–ª—å–Ω–æ—Å—Ç—å!!

  radio.powerUp();        // –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É
  radio.stopListening();  // –Ω–µ —Å–ª—É—à–∞–µ–º —Ä–∞–¥–∏–æ—ç—Ñ–∏—Ä, –º—ã –ø–µ—Ä–µ–¥–∞—Ç—á–∏–∫
}