//#define DEBUG



//--------------------- –ù–ê–°–¢–†–û–ô–ö–ò ----------------------
#define CH_NUM 0x95  // –Ω–æ–º–µ—Ä –∫–∞–Ω–∞–ª–∞ (–¥–æ–ª–∂–µ–Ω —Å–æ–≤–ø–∞–¥–∞—Ç—å —Å –ø–µ—Ä–µ–¥–∞—Ç—á–∏–∫–æ–º)
//--------------------- –ù–ê–°–¢–†–û–ô–ö–ò ----------------------

//--------------------- –î–õ–Ø –†–ê–ó–†–ê–ë–û–¢–ß–ò–ö–û–í -----------------------
// –£–†–û–í–ï–ù–¨ –ú–û–©–ù–û–°–¢–ò –ü–ï–†–ï–î–ê–¢–ß–ò–ö–ê
// –ù–∞ –≤—ã–±–æ—Ä RF24_PA_MIN, RF24_PA_LOW, RF24_PA_HIGH, RF24_PA_MAX
#define SIG_POWER RF24_PA_HIGH

// –°–ö–û–†–û–°–¢–¨ –û–ë–ú–ï–ù–ê
// –ù–∞ –≤—ã–±–æ—Ä RF24_2MBPS, RF24_1MBPS, RF24_250KBPS
// –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ–¥–∏–Ω–∞–∫–æ–≤–∞ –Ω–∞ –ø—Ä–∏—ë–º–Ω–∏–∫–µ –∏ –ø–µ—Ä–µ–¥–∞—Ç—á–∏–∫–µ!
// –ø—Ä–∏ —Å–∞–º–æ–π –Ω–∏–∑–∫–æ–π —Å–∫–æ—Ä–æ—Å—Ç–∏ –∏–º–µ–µ–º —Å–∞–º—É—é –≤—ã—Å–æ–∫—É—é —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∏ –¥–∞–ª—å–Ω–æ—Å—Ç—å!!
// –í–ù–ò–ú–ê–ù–ò–ï!!! enableAckPayload –ù–ï –†–ê–ë–û–¢–ê–ï–¢ –ù–ê –°–ö–û–†–û–°–¢–ò 250 kbps!
#define SIG_SPEED RF24_1MBPS
//--------------------- –î–õ–Ø –†–ê–ó–†–ê–ë–û–¢–ß–ò–ö–û–í -----------------------

//--------------------- –ë–ò–ë–õ–ò–û–¢–ï–ö–ò ----------------------
#include <Wire.h>
#include <SPI.h>
#include "nRF24L01.h"
#include "RF24.h"
#define EEPROM_ADDR 0x50  // –ê–¥—Ä–µ—Å I2C –¥–ª—è 24C65, –æ–±—ã—á–Ω–æ —ç—Ç–æ 0x50 (–¥–ª—è –∞–¥—Ä–µ—Å–∞ 0xA0)
#define MAX_WORD_LENGTH 50
RF24 radio(9, 8);  // "—Å–æ–∑–¥–∞—Ç—å" –º–æ–¥—É–ª—å –Ω–∞ –ø–∏–Ω–∞—Ö 9 –∏ 10 –¥–ª—è –ù–ê–ù–û/–£–ù–û
//RF24 radio(9, 53); // –¥–ª—è –ú–ï–ì–ò
//--------------------- –ë–ò–ë–õ–ò–û–¢–ï–ö–ò ----------------------

//--------------------- –ü–ï–†–ï–ú–ï–ù–ù–´–ï ----------------------
byte pipeNo;
byte address[][6] = { "1Node", "2Node", "3Node", "4Node", "5Node", "6Node" };  // –≤–æ–∑–º–æ–∂–Ω—ã–µ –Ω–æ–º–µ—Ä–∞ —Ç—Ä—É–±

// –°–ø–∏—Å–æ–∫ —Å–ª–æ–≤
const char* words[] = { "hell", "god", "lock" };
const int wordCount = sizeof(words) / sizeof(words[0]);

// –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –ª–æ–≥–∏–∫–∏ –∏–≥—Ä—ã
char targetWord[MAX_WORD_LENGTH] = "";
int currentLetterIndex = 0, currentLetterClock = 0;
bool gameActive = false;
unsigned long lastReadTime = 0;

byte tempclocll;
int telemetry[2];      // –º–∞—Å—Å–∏–≤ –¥–∞–Ω–Ω—ã—Ö —Ç–µ–ª–µ–º–µ—Ç—Ä–∏–∏ (—Ç–æ —á—Ç–æ —à–ª—ë–º –Ω–∞ –ø–µ—Ä–µ–¥–∞—Ç—á–∏–∫)
//--------------------- –ü–ï–†–ï–ú–ï–ù–ù–´–ï ----------------------
int x;
void setup() {
  Wire.begin();
  Serial.begin(115200);
  radioSetup();
  Serial.print("–°—Ç–∞—Ä—Ç ");
}

void loop() {

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –±—É–∫–≤—ã –∏ –∑–∞–¥–µ—Ä–∂–∫—É
    if ( millis() - lastReadTime > 15000) {
      lastReadTime = millis();  // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–∞–π–º–µ—Ä
    Serial.println("‚úÖ —Å–µ–Ω–¥ —Ç—Ä—É–±–∞2 –±—É–∫–≤–∞!");
    tempclocll++;
     char message[32];// = "Data from server" ;
    sprintf(message, "Data from server %d", tempclocll);
    radio.stopListening();  // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏–µ
    delay(5);
    radio.write(&message, sizeof(message));  // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –Ω–∞ —Ç—Ä—É–±—É 2
    delay(5);
    radio.startListening();  // –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏—é


    }

  // –ß–∏—Ç–∞–µ–º –∫–æ–º–∞–Ω–¥—É –¥–ª—è –≤—ã–±–æ—Ä–∞ —Å–ª–æ–≤–∞
  if (Serial.available()) {
    char cmd = Serial.read();
    if (cmd == '1') {
      startNewGame(0);  // –ó–∞–ø—É—Å–∫ –ø–µ—Ä–≤–æ–≥–æ —Å–ª–æ–≤–∞
    } else if (cmd == '2') {
      startNewGame(1);  // –ó–∞–ø—É—Å–∫ –≤—Ç–æ—Ä–æ–≥–æ —Å–ª–æ–≤–∞
    } else if (cmd == '3') {
      startNewGame(2);  // –ó–∞–ø—É—Å–∫ —Ç—Ä–µ—Ç—å–µ–≥–æ —Å–ª–æ–≤–∞
    }
  }


  if (radio.available(&pipeNo)) {  // —Å–ª—É—à–∞–µ–º —ç—Ñ–∏—Ä
    char receivedUID[16] = "";
    telemetry[0] = 0;
    telemetry[1] = 0;
    radio.read(&receivedUID, sizeof(receivedUID));
    String receivedLetter = searchInEEPROM(receivedUID);

#ifdef DEBUG
        Serial.print("–ü–æ–ª—É—á–µ–Ω–æ —Å pipe ");
        Serial.print(pipeNo); // –í—ã–≤–æ–¥–∏–º –Ω–æ–º–µ—Ä –∫–∞–Ω–∞–ª–∞
    Serial.print("üì§ UID  —Å–µ—Ä–≤–µ—Ä—É: ");
    Serial.println(receivedUID);
    if (receivedLetter != '\0') {
      Serial.print("üîé –ù–∞–π–¥–µ–Ω–Ω–∞—è –±—É–∫–≤–∞: ");
      Serial.println(receivedLetter);
      Serial.print("üîé wait  –±—É–∫–≤–∞: ");
      Serial.println(targetWord[currentLetterIndex]);
    }
#endif



      if (receivedLetter.charAt(0) == targetWord[currentLetterIndex]) {
        #ifdef DEBUG     
           Serial.println("‚úÖ –í–µ—Ä–Ω–∞—è –±—É–∫–≤–∞!");
        #endif
        currentLetterClock++;
        telemetry[0] = 15+currentLetterClock*2;
        telemetry[1] = 1122;

        if (currentLetterClock == 10) {
          currentLetterClock = 0;
          currentLetterIndex++;
        }
        if (currentLetterIndex >= strlen(targetWord)) {
          Serial.println("üéâ –ó–∞–¥–∞–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ!");
          gameActive = false;
        }
      } else {
        currentLetterClock = 0;
           telemetry[0] = 1;
        telemetry[1] = 1;
#ifdef DEBUG
        Serial.println("‚ùå –û—à–∏–±–∫–∞, –∂–¥—ë–º –ø—Ä–∞–≤–∏–ª—å–Ω—É—é –±—É–∫–≤—É!");
#endif
      }
  //  }


    // –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–∞–∫–µ—Ç —Ç–µ–ª–µ–º–µ—Ç—Ä–∏–∏
    radio.writeAckPayload(pipeNo, &telemetry, sizeof(telemetry));
     radio.flush_rx();
  }

}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∏—Å–∫–∞ UID –≤ –ø–∞–º—è—Ç–∏ 24C64 –∏ –≤–æ–∑–≤—Ä–∞—Ç–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–π –±—É–∫–≤—ã
String searchInEEPROM(const char* uid) {
  char uidBuffer[15];
  char letterBuffer[2];
  int pageCount = 45;  // –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–∞–Ω–∏—Ü –¥–ª—è –ø–æ–∏—Å–∫–∞ (–∫–∞–∂–¥–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –ø–æ 32 –±–∞–π—Ç–∞)

  for (int page = 0; page < pageCount; page++) {
    int baseAddr = page * 32;  // –ö–∞–∂–¥—ã–π —ç–ª–µ–º–µ–Ω—Ç UID + –±—É–∫–≤–∞ –∑–∞–Ω–∏–º–∞–µ—Ç 17 –±–∞–π—Ç
    // –ß–∏—Ç–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å EEPROM
    Wire.beginTransmission(EEPROM_ADDR);
    Wire.write((baseAddr >> 8) & 0xFF);  // –°—Ç–∞—Ä—à–∏–π –±–∞–π—Ç –∞–¥—Ä–µ—Å–∞
    Wire.write(baseAddr & 0xFF);         // –ú–ª–∞–¥—à–∏–π –±–∞–π—Ç –∞–¥—Ä–µ—Å–∞
    Wire.endTransmission();
    Wire.requestFrom(EEPROM_ADDR, 17);  // –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º 17 –±–∞–π—Ç (UID + –±—É–∫–≤–∞)

    // –ß–∏—Ç–∞–µ–º UID
    for (int i = 0; i < 15; i++) {
      uidBuffer[i] = Wire.read();
    }

    // –ß–∏—Ç–∞–µ–º –±—É–∫–≤—É
    for (int i = 0; i < 2; i++) {
      letterBuffer[i] = Wire.read();
    }

    // –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º —Å—á–∏—Ç–∞–Ω–Ω—ã–π UID —Å –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–º
    if (strncmp(uid, uidBuffer, 15) == 0) {
      return String(letterBuffer);  // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –±—É–∫–≤—É, –µ—Å–ª–∏ UID —Å–æ–≤–ø–∞–ª
    }
  }

  return "";  // –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ
}



// –§—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –∏–≥—Ä—ã –ø–æ –≤–Ω–µ—à–Ω–µ–º—É —Å–æ–±—ã—Ç–∏—é
void startNewGame(int wordIndex) {
  if (wordIndex < 0 || wordIndex >= wordCount) return;

  strcpy(targetWord, words[wordIndex]);  // –í—ã–±–∏—Ä–∞–µ–º —Å–ª–æ–≤–æ
  currentLetterIndex = 0;                // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –∏–Ω–¥–µ–∫—Å
  gameActive = true;

  Serial.print("üéØ –ó–∞–≥–∞–¥–∞–Ω–æ —Å–ª–æ–≤–æ: ");
  Serial.println(targetWord);
}


void radioSetup() {                      // –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ —Ä–∞–¥–∏–æ
  radio.begin();                         // –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –º–æ–¥—É–ª—å
  radio.setAutoAck(1);                   // —Ä–µ–∂–∏–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø—Ä–∏—ë–º–∞, 1 –≤–∫–ª 0 –≤—ã–∫–ª
  radio.setRetries(0, 15);               // (–≤—Ä–µ–º—è –º–µ–∂–¥—É –ø–æ–ø—ã—Ç–∫–æ–π –¥–æ—Å—Ç—É—á–∞—Ç—å—Å—è, —á–∏—Å–ª–æ –ø–æ–ø—ã—Ç–æ–∫)
  radio.enableAckPayload();              // —Ä–∞–∑—Ä–µ—à–∏—Ç—å –æ—Ç—Å—ã–ª–∫—É –¥–∞–Ω–Ω—ã—Ö –≤ –æ—Ç–≤–µ—Ç –Ω–∞ –≤—Ö–æ–¥—è—â–∏–π —Å–∏–≥–Ω–∞–ª
  radio.setPayloadSize(32);              // —Ä–∞–∑–º–µ—Ä –ø–∞–∫–µ—Ç–∞, –±–∞–π—Ç
  radio.openReadingPipe(1, address[0]);  // —Ö–æ—Ç–∏–º —Å–ª—É—à–∞—Ç—å —Ç—Ä—É–±—É 0
  radio.openWritingPipe(address[1]);   // —Ö–æ—Ç–∏–º –ø–∏—Å–∞—Ç—å —Ç—Ä—É–±—É 1
  radio.setChannel(CH_NUM);              // –≤—ã–±–∏—Ä–∞–µ–º –∫–∞–Ω–∞–ª (–≤ –∫–æ—Ç–æ—Ä–æ–º –Ω–µ—Ç —à—É–º–æ–≤!)
  radio.setPALevel(SIG_POWER);           // —É—Ä–æ–≤–µ–Ω—å –º–æ—â–Ω–æ—Å—Ç–∏ –ø–µ—Ä–µ–¥–∞—Ç—á–∏–∫–∞
  radio.setDataRate(SIG_SPEED);          // —Å–∫–æ—Ä–æ—Å—Ç—å –æ–±–º–µ–Ω–∞
  // –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ–¥–∏–Ω–∞–∫–æ–≤–∞ –Ω–∞ –ø—Ä–∏—ë–º–Ω–∏–∫–µ –∏ –ø–µ—Ä–µ–¥–∞—Ç—á–∏–∫–µ!
  // –ø—Ä–∏ —Å–∞–º–æ–π –Ω–∏–∑–∫–æ–π —Å–∫–æ—Ä–æ—Å—Ç–∏ –∏–º–µ–µ–º —Å–∞–º—É—é –≤—ã—Å–æ–∫—É—é —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∏ –¥–∞–ª—å–Ω–æ—Å—Ç—å!!
  radio.powerUp();         // –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É
  radio.startListening();  // –Ω–∞—á–∏–Ω–∞–µ–º —Å–ª—É—à–∞—Ç—å —ç—Ñ–∏—Ä, –º—ã –ø—Ä–∏—ë–º–Ω—ã–π –º–æ–¥—É–ª—å
}
